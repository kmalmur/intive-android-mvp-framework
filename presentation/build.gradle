apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'


android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion 24
    buildToolsVersion "24.0.3"
    defaultConfig {
        applicationId "com.intive.intivemvpframework"
        minSdkVersion 16
        targetSdkVersion 24

        multiDexEnabled true

        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError false
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'              //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
        disable 'GoogleAppIndexingWarning'
        disable 'AllowBackup'
    }

    signingConfigs {
        debug {
            storeFile file('../keystore/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        release {
            //NOTE: the release keystore is not in the repository, it must be placed there by the CI tool (or manually on the local PC).
            // Jenkins CI will be configured so that, the keystore file will be uploaded by the user for every build, along with the keystore credentials
            //
            // In case you want to be able to build the release build locally, you can copy the debug.keystore to release.keystore, the credentials will be
            // applied automatically
            storeFile file('../keystore/release.keystore')
            storePassword System.getenv("KEYSTORE_PASSWORD") ?: "android"
            keyAlias System.getenv("KEY_ALIAS") ?: "androiddebugkey"
            keyPassword System.getenv("KEY_PASSWORD") ?: "android"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            debuggable true
            buildConfigField 'String', 'BACKEND_URL', '"http://example.com/integration"'
        }

        release {
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled false
            buildConfigField 'String', 'BACKEND_URL', '"http://example.com/production"'

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        jumboMode true
    }
}

dependencies {
    compile project(':domain')
    compile project(':data')

    provided "javax.annotation:jsr250-api:1.0"

    apt  "com.google.dagger:dagger-compiler:2.0.2"
    compile "com.google.dagger:dagger:2.0.2"

    compile "com.jakewharton:butterknife:7.0.1"
    compile "io.reactivex:rxjava:1.0.14"
    compile "io.reactivex:rxandroid:1.0.1"

    compile "com.android.support:recyclerview-v7:24.2.1"
    compile 'com.android.support:appcompat-v7:24.2.1'

    compile 'com.jakewharton.timber:timber:4.3.1'

    compile "com.squareup.leakcanary:leakcanary-android:1.3.1"

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
}
